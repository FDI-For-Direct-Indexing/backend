#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ogong-backend:server");
var http = require("http");
var socketIo = require("socket.io");
var { handleSocketConnection } = require("../service/chat");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT);
app.set("port", port);

/**
 * Create HTTP server.
 */

const { CLIENT_URL } = process.env;

const whitelist = ["http://localhost:3000", CLIENT_URL];

var server = http.createServer(app);

var io = socketIo(server, {
  path: "/chat",
  cors: {
    origin: function (origin, callback) {
      // Allow requests with no origin (like mobile apps or curl requests)
      if (!origin) return callback(null, true);
      if (whitelist.indexOf(origin) !== -1) {
        callback(null, true); // 허용된 출처일 경우
      } else {
        callback(new Error("Not allowed by CORS")); // 허용되지 않은 출처일 경우
      }
    },
    methods: ["GET", "POST"],
    credentials: true,
  },
});

// Socket.IO 이벤트 핸들링 설정
handleSocketConnection(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  debug("Listening on port " + port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
